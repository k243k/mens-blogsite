generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  AUTHOR
  READER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PurchaseProvider {
  stripe
}

model User {
  id           String    @id @default(cuid())
  name         String?
  email        String    @unique
  passwordHash String
  role         UserRole  @default(READER)
  emailVerified DateTime?
  createdAt    DateTime  @default(now())
  posts        Post[]
  purchases    Purchase[]
  comments     Comment[]
  accounts     Account[]
  sessions     Session[]
}

model Post {
  id               String          @id @default(cuid())
  slug             String          @unique
  title            String
  excerpt          String
  body             String
  coverImage       String?
  status           PostStatus      @default(DRAFT)
  publishedAt      DateTime?
  isPaid           Boolean         @default(false)
  priceJPY         Int             @default(0)
  readTime         Int             @default(0)
  authorId         String
  commentsEnabled  Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  stripeProductId  String?
  stripePriceId    String?
  stripePriceAmount Int?
  author           User            @relation(fields: [authorId], references: [id])
  categories       PostCategory[]
  tags             PostTag[]
  purchases        Purchase[]
  comments         Comment[]
}

model Category {
  id        String         @id @default(cuid())
  name      String
  slug      String         @unique
  posts     PostCategory[]
}

model Tag {
  id        String      @id @default(cuid())
  name      String
  slug      String      @unique
  posts     PostTag[]
}

model PostCategory {
  postId     String
  categoryId String
  assignedAt DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}

model PostTag {
  postId  String
  tagId   String
  taggedAt DateTime @default(now())
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

model Purchase {
  id                 String            @id @default(cuid())
  userId             String
  postId             String
  provider           PurchaseProvider  @default(stripe)
  providerSessionId  String            @unique
  createdAt          DateTime          @default(now())
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  post               Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Setting {
  key   String  @id
  value Json
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String         @id @default(cuid())
  postId    String
  userId    String
  body      String
  status    CommentStatus  @default(PENDING)
  createdAt DateTime       @default(now())
  post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
